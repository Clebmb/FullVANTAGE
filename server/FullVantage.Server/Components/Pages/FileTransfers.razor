@page "/file-transfers"
@rendermode InteractiveServer
@using System.Net.Http.Json
@using FullVantage.Shared
@using FullVantage.Server.Services
@inject IHttpClientFactory HttpFactory
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<h3>File Transfers</h3>

<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5>Active Transfers</h5>
            </div>
            <div class="card-body">
                @if (_activeTransfers is null)
                {
                    <p>Loading transfers...</p>
                }
                else if (_activeTransfers.Count == 0)
                {
                    <p>No active transfers.</p>
                }
                else
                {
                    <div class="list-group">
                        @foreach (var transfer in _activeTransfers)
                        {
                            <div class="list-group-item">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <strong>@transfer.TransferId.Substring(0, 8)</strong><br/>
                                        <small>@transfer.Type: @Path.GetFileName(transfer.SourcePath) â†’ @Path.GetFileName(transfer.DestinationPath)</small><br/>
                                        <small>Agent: @transfer.AgentId.Substring(0, 8)</small>
                                    </div>
                                    <div class="text-end">
                                        <span class="badge @GetStatusClass(transfer.Status)">@transfer.Status</span><br/>
                                        <small>@transfer.BytesTransferred.ToString("N0") / @transfer.TotalBytes.ToString("N0") bytes</small><br/>
                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => CancelTransfer(transfer.TransferId)">Cancel</button>
                                    </div>
                                </div>
                                @if (transfer.Status == FileTransferStatus.InProgress)
                                {
                                    <div class="progress mt-2">
                                        <div class="progress-bar" role="progressbar" 
                                             style="width: @(transfer.TotalBytes > 0 ? (transfer.BytesTransferred * 100 / transfer.TotalBytes) : 0)%">
                                            @(transfer.TotalBytes > 0 ? (transfer.BytesTransferred * 100 / transfer.TotalBytes) : 0)%
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5>Active Operations</h5>
            </div>
            <div class="card-body">
                @if (_activeOperations is null)
                {
                    <p>Loading operations...</p>
                }
                else if (_activeOperations.Count == 0)
                {
                    <p>No active operations.</p>
                }
                else
                {
                    <div class="list-group">
                        @foreach (var operation in _activeOperations)
                        {
                            <div class="list-group-item">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <strong>@operation.OperationId.Substring(0, 8)</strong><br/>
                                        <small>@operation.Type: @string.Join(", ", operation.SourcePaths.Select(p => Path.GetFileName(p)))</small><br/>
                                        <small>Agent: @operation.AgentId.Substring(0, 8)</small>
                                    </div>
                                    <div class="text-end">
                                        <span class="badge @GetStatusClass(operation.Status)">@operation.Status</span><br/>
                                        <small>Started: @operation.StartTime.ToString("HH:mm:ss")</small><br/>
                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => CancelOperation(operation.OperationId)">Cancel</button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<FullVantage.Server.Services.FileTransferService.FileTransferSession>? _activeTransfers;
    private List<FullVantage.Server.Services.FileTransferService.FileOperationSession>? _activeOperations;
    private Timer? _refreshTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        
        // Set up auto-refresh every 5 seconds
        _refreshTimer = new Timer(async _ => await LoadData(), null, TimeSpan.Zero, TimeSpan.FromSeconds(5));
    }

    public void Dispose()
    {
        _refreshTimer?.Dispose();
    }

    private async Task LoadData()
    {
        try
        {
            var client = HttpFactory.CreateClient();
            client.BaseAddress = new Uri(NavigationManager.BaseUri);
            
            var transfersTask = client.GetFromJsonAsync<List<FullVantage.Server.Services.FileTransferService.FileTransferSession>>("/api/file-transfers");
            var operationsTask = client.GetFromJsonAsync<List<FullVantage.Server.Services.FileTransferService.FileOperationSession>>("/api/file-operations");
            
            await Task.WhenAll(transfersTask, operationsTask);
            
            _activeTransfers = await transfersTask;
            _activeOperations = await operationsTask;
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private async Task CancelTransfer(string transferId)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to cancel this transfer?"))
        {
            return;
        }

        try
        {
            var client = HttpFactory.CreateClient();
            client.BaseAddress = new Uri(NavigationManager.BaseUri);
            
            var response = await client.DeleteAsync($"/api/file-transfers/{transferId}");
            if (response.IsSuccessStatusCode)
            {
                await LoadData();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cancelling transfer: {ex.Message}");
        }
    }

    private async Task CancelOperation(string operationId)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to cancel this operation?"))
        {
            return;
        }

        try
        {
            var client = HttpFactory.CreateClient();
            client.BaseAddress = new Uri(NavigationManager.BaseUri);
            
            var response = await client.DeleteAsync($"/api/file-operations/{operationId}");
            if (response.IsSuccessStatusCode)
            {
                await LoadData();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cancelling operation: {ex.Message}");
        }
    }

    private static string GetStatusClass(FileTransferStatus status) => status switch
    {
        FileTransferStatus.Pending => "bg-warning",
        FileTransferStatus.InProgress => "bg-primary",
        FileTransferStatus.Completed => "bg-success",
        FileTransferStatus.Failed => "bg-danger",
        FileTransferStatus.Cancelled => "bg-secondary",
        _ => "bg-secondary"
    };
}
